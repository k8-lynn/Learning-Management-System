/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package system;

import Design.CurvedScrollBarUI;
import Design.CustomCellRenderer;
import Design.CustomHeaderRenderer;
import Design.CustomTableCellRenderer;
import Design.StatusCellRenderer;
import Design.StatusCellRenderer2;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nisha
 */
public class ViewStatusReport extends javax.swing.JPanel {

    /**
     * Creates new form StudentRegistrationList
     */
    DefaultTableModel model;

    public ViewStatusReport() {
        initComponents();
          // Set custom scroll bar UI for jScrollPane2
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane2.getVerticalScrollBar().setUI(new CurvedScrollBarUI());
        jScrollPane2.getHorizontalScrollBar().setUI(new CurvedScrollBarUI());

        jTable1.getTableHeader().setDefaultRenderer(new CustomHeaderRenderer());
        jTable1.setDefaultRenderer(Object.class, new CustomCellRenderer());

        // Set the row height and curve radius
        jTable1.setRowHeight(20); // Set row height
        jTable1.setIntercellSpacing(new Dimension(0, 0)); // Remove cell spacing
        jTable1.setShowGrid(false); // Hide grid lines
        jTable1.setShowHorizontalLines(true);
       
        setTableHeaderHeight(jTable1, 30); // Set header height

        // Make even rows a different color
        jTable1.setOpaque(false); // Make table transparent
        jTable1.setBackground(new Color(240, 240, 240)); // Set background color for odd rows
        
        txtKeyId.setVisible(false);
       
        generateStatusReport("assign_student_list.txt", "status_report.txt");
       
        // Populate table
        populateTable();
        
        // Apply custom cell renderer to each column
        CustomTableCellRenderer renderer = new CustomTableCellRenderer();
        for (int i = 0; i < jTable1.getColumnCount(); i++) {
            jTable1.getColumnModel().getColumn(i).setCellRenderer(renderer);
        }
        // Change color of the row based on the status
        if(jTable1.getRowCount() > 0 ){

            StatusCellRenderer2 renderer2 = new StatusCellRenderer2();
            for (int i = 0; i < jTable1.getColumnCount(); i++) {
                System.out.println(i);
                jTable1.getColumnModel().getColumn(i).setCellRenderer(renderer2);
            }
        }
 
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainViewStatus = new javax.swing.JLayeredPane();
        pnlViewStatus = new javax.swing.JPanel();
        lblViewStatusTitle = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        lblSearch = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        txtKeyId = new javax.swing.JTextField();
        pnlInfo = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblBox = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1075, 650));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMainViewStatus.setPreferredSize(new java.awt.Dimension(1075, 650));
        pnlMainViewStatus.setLayout(new java.awt.CardLayout());

        pnlViewStatus.setBackground(new java.awt.Color(255, 255, 255));
        pnlViewStatus.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblViewStatusTitle.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblViewStatusTitle.setForeground(new java.awt.Color(0, 0, 0));
        lblViewStatusTitle.setText("View Status Report");
        pnlViewStatus.add(lblViewStatusTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, -1, -1));

        jScrollPane2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 1, true));
        jScrollPane2.setForeground(new java.awt.Color(221, 218, 218));

        jTable1.setBackground(new java.awt.Color(255, 255, 255));
        jTable1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(244, 244, 244), 1, true));
        jTable1.setForeground(new java.awt.Color(0, 0, 0));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Key ID", "Name", "Intake Code", "Assessment", "Status", "Supervisor ID", "Marked", "Second Marker", "Marked"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jTable1.setGridColor(new java.awt.Color(204, 204, 204));
        jTable1.setOpaque(false);
        jTable1.setSelectionBackground(new java.awt.Color(102, 255, 51));
        jTable1.setSelectionForeground(new java.awt.Color(0, 0, 0));
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jTable1MouseEntered(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        pnlViewStatus.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 1030, 380));

        lblSearch.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        lblSearch.setForeground(new java.awt.Color(51, 153, 255));
        lblSearch.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/img_icon/searchIcon.png"))); // NOI18N
        lblSearch.setText(":");
        pnlViewStatus.add(lblSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 90, 40, 30));

        txtSearch.setBackground(new java.awt.Color(244, 244, 244));
        txtSearch.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(153, 153, 153)));
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSearchKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });
        pnlViewStatus.add(txtSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 90, 230, 25));

        txtKeyId.setBackground(new java.awt.Color(255, 51, 51));
        txtKeyId.setText("id");
        pnlViewStatus.add(txtKeyId, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 100, 200, -1));

        pnlInfo.setBackground(new java.awt.Color(204, 204, 204));
        pnlInfo.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("# INFO");
        pnlInfo.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        jLabel2.setBackground(new java.awt.Color(51, 255, 51));
        jLabel2.setOpaque(true);
        jLabel2.setPreferredSize(new java.awt.Dimension(30, 15));
        pnlInfo.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, -1, -1));

        jLabel3.setBackground(new java.awt.Color(0, 0, 0));
        jLabel3.setOpaque(true);
        jLabel3.setPreferredSize(new java.awt.Dimension(30, 15));
        pnlInfo.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        jLabel4.setBackground(new java.awt.Color(255, 255, 0));
        jLabel4.setOpaque(true);
        jLabel4.setPreferredSize(new java.awt.Dimension(30, 15));
        pnlInfo.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, -1));

        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("Student Submitted , Supervisor and Second Marker Marked");
        pnlInfo.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 70, -1, -1));

        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("Student Not Summited Report");
        pnlInfo.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 30, -1, -1));

        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("Supervisor/Second Marker Not Marked");
        pnlInfo.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 50, -1, -1));

        pnlViewStatus.add(pnlInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 540, 380, 90));

        lblBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/img_icon/TransparentBox2.png"))); // NOI18N
        pnlViewStatus.add(lblBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlMainViewStatus.add(pnlViewStatus, "card2");

        add(pnlMainViewStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

       // Method to set table header height
    private void setTableHeaderHeight(JTable table, int height) {
        JTableHeader header = table.getTableHeader();
        TableColumnModel columnModel = header.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setHeaderRenderer(new Design.HeaderRenderer(height));
            column.setPreferredWidth(130); // Set preferred column width
        }
        header.setPreferredSize(new Dimension(header.getWidth(), height));
    }
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        int row = jTable1.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();


        // Set the text of txtId with the integer ID converted to a string
        txtKeyId.setText(model.getValueAt(row, 0).toString());


        if(txtSearch.getText()!=""){
            // Get the sorted row index in the model
            int sortedRowIndex = jTable1.convertRowIndexToModel(row);
            String idSort = model.getValueAt(sortedRowIndex, 0).toString();

            // Set the text of txtId with the integer ID converted to a string
            txtKeyId.setText(idSort);

        }
        
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseEntered

    private void txtSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyReleased
        txtSearch.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.LIGHT_GRAY)); // Add border
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel(); // Get the table model
        TableRowSorter<DefaultTableModel> obj = new TableRowSorter<>(model); // Create a new row sorter for the table model
        jTable1.setRowSorter(obj); // Set the row sorter for the table
        obj.setRowFilter(RowFilter.regexFilter(txtSearch.getText())); // Apply a row filter based on the text in the search field
    }//GEN-LAST:event_txtSearchKeyReleased

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
        txtSearch.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 0, Color.BLUE)); // Add border
    }//GEN-LAST:event_txtSearchKeyTyped


    
private void populateTable() {
    DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
    model.setRowCount(0); // Clear existing rows

    File file = new File("status_report.txt");
    try {
        if (!file.exists()) {
            file.createNewFile();
        }
        BufferedReader reader = new BufferedReader(new FileReader(file));
        String line;
        while ((line = reader.readLine()) != null) {
            String[] data = line.split(",");
            if (data.length >= 8) { // Ensure there are enough columns
                String[] selectedData = new String[] {
                    data[0], // Student ID
                    data[1], // Student Name
                    data[2], // Intake Code
                    data[3], // Assessment
                    data[6], // Status
                    data[7], // Supervisor ID
                    data[9],  // Supervisor Status
                    data[10], // Supervisor ID
                    data[12]  // Supervisor Status
                        
                };
                model.addRow(selectedData);
            }
        }
        reader.close();
    } catch (IOException e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(null, "Error reading data from file: " + e.getMessage(),
                "Error", JOptionPane.ERROR_MESSAGE);
    }
}

    private void generateStatusReport(String inputFilePath, String outputFilePath) {
    try {
        // Read all lines from the input file
        List<String> lines = Files.readAllLines(Paths.get(inputFilePath));

        // Read all lines from the output file if it exists
        List<String> existingStatusReportLines = new ArrayList<>();
        Path outputPath = Paths.get(outputFilePath);
        if (Files.exists(outputPath)) {
            existingStatusReportLines = Files.readAllLines(outputPath);
        }

        // List to store the lines for the status report
        List<String> statusReportLines = new ArrayList<>(existingStatusReportLines);

        // Create a set of existing records for easy lookup
        Set<String> existingRecords = new HashSet<>();
        for (String line : existingStatusReportLines) {
            String[] columns = line.split(",");
            if (columns.length >= 14) {  // Ensure there are enough columns
                String key = columns[0] + "," + columns[1] + "," + columns[2] + "," 
                        + columns[3] + "," + columns[7] + "," + columns[10];
                existingRecords.add(key);
            }
        }

        for (String line : lines) {
            // Split the line into columns
            String[] columns = line.split(",");
            if (columns.length >= 12) {  // Ensure there are enough columns
                // Check if any relevant column contains "-"
                boolean hasDash = columns[6].equals("-") || columns[7].equals("-") 
                        || columns[8].equals("-") || columns[9].equals("-") 
                        || columns[10].equals("-") || columns[11].equals("-");
                if (hasDash) {
                    continue;  // Skip this line if any relevant column contains "-"
                }

                // Form the new status line
                String statusLine = String.join(",", Arrays.asList(
                    columns[0], // Student ID
                    columns[1], // Student Name
                    columns[2], // Intake Code
                    columns[3], // Assessment Type
                    columns[4], // Date
                    columns[5], // Time
                    "Pending",  // Status
                    columns[6], // Supervisor ID
                    columns[7], // Supervisor Name
                    "Pending",  // Supervisor Status
                    columns[8], // Second Marker ID
                    columns[9], // Second Marker Name
                    "Pending",   // Second Marker Status
                    columns[10], // Date
                    columns[11]  // Time
                ));

                // Create a key for comparison
                String key = columns[0] + "," + columns[1] + "," + columns[2] + "," 
                        + columns[3] + "," + columns[6] + "," + columns[8];

                // Check if the record already exists in the status report
                if (!existingRecords.contains(key)) {
                    // Add the new status line to the list
                    statusReportLines.add(statusLine);
                    // Add to existing records to avoid reprocessing
                    existingRecords.add(key);
                }
            }
        }

        // Write the status report lines to the output file
        Files.write(outputPath, statusReportLines);

        System.out.println("Status report generated successfully.");

    } catch (IOException e) {
        e.printStackTrace();
        System.out.println("Error generating status report: " + e.getMessage());
    }
}

    

     
  
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lblBox;
    private javax.swing.JLabel lblSearch;
    private javax.swing.JLabel lblViewStatusTitle;
    private javax.swing.JPanel pnlInfo;
    private javax.swing.JLayeredPane pnlMainViewStatus;
    private javax.swing.JPanel pnlViewStatus;
    private javax.swing.JTextField txtKeyId;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
