/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package system;

import Design.CurvedScrollBarUI;
import Design.CustomCellRenderer;
import Design.CustomHeaderRenderer;
import Design.CustomTableCellRenderer;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nisha
 */
public class ReportSubmission extends javax.swing.JPanel {

    /**
     * Creates new form StudentRegistrationList
     */
    public String id; 
    LoginPage login = new LoginPage();



    public ReportSubmission() {
        initComponents();
        
        
 
        String input = login.getUsername();
        String[] parts = input.split("-");
        if (parts.length > 1) {
            id = parts[1];
        }
        
        populateBox();
        populateInfo();
        
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainReportSub = new javax.swing.JLayeredPane();
        pnlReportSub = new javax.swing.JPanel();
        lblReportSubTitle = new javax.swing.JLabel();
        lblReportSub = new javax.swing.JLabel();
        lblInfo = new javax.swing.JLabel();
        pnlStudentDetails4 = new javax.swing.JPanel();
        lblSubFile = new javax.swing.JLabel();
        pnlStudentDetails3 = new javax.swing.JPanel();
        lblSubDate = new javax.swing.JLabel();
        pnlStudentDetails2 = new javax.swing.JPanel();
        lblSubStatus2 = new javax.swing.JLabel();
        pnlStudentDetails = new javax.swing.JPanel();
        lblSubDetails = new javax.swing.JLabel();
        btnSubmitEdit = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        txtFile = new javax.swing.JTextField();
        btnFile = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        lblDateTime = new javax.swing.JLabel();
        pnlStatus = new javax.swing.JPanel();
        lblStatus = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        intakeLabel1 = new javax.swing.JLabel();
        txtIntakeCode = new javax.swing.JTextField();
        txtAssess = new javax.swing.JTextField();
        lblAssessement = new javax.swing.JLabel();
        btnRemove = new javax.swing.JButton();
        lblInfo1 = new javax.swing.JLabel();
        lblBox = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1075, 650));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMainReportSub.setPreferredSize(new java.awt.Dimension(1075, 650));
        pnlMainReportSub.setLayout(new java.awt.CardLayout());

        pnlReportSub.setBackground(new java.awt.Color(255, 255, 255));
        pnlReportSub.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblReportSubTitle.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblReportSubTitle.setForeground(new java.awt.Color(0, 0, 0));
        lblReportSubTitle.setText("Report Submission");
        pnlReportSub.add(lblReportSubTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, -1, -1));

        lblReportSub.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblReportSub.setForeground(new java.awt.Color(29, 62, 105));
        lblReportSub.setText("Submit Report");
        pnlReportSub.add(lblReportSub, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        lblInfo.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblInfo.setForeground(new java.awt.Color(0, 0, 0));
        lblInfo.setText("NOTE : Make sure to rename your file : Your Name_ID Key_Intake Code_Assessement Type");
        pnlReportSub.add(lblInfo, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, -1, -1));

        pnlStudentDetails4.setBackground(new java.awt.Color(255, 255, 255));
        pnlStudentDetails4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(221, 218, 218), 1, true));
        pnlStudentDetails4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSubFile.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSubFile.setForeground(new java.awt.Color(0, 0, 0));
        lblSubFile.setText("File Submission : ");
        pnlStudentDetails4.add(lblSubFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        pnlReportSub.add(pnlStudentDetails4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 410, 160, 80));

        pnlStudentDetails3.setBackground(new java.awt.Color(244, 244, 244));
        pnlStudentDetails3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(221, 218, 218), 1, true));
        pnlStudentDetails3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSubDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSubDate.setForeground(new java.awt.Color(0, 0, 0));
        lblSubDate.setText("<html>Summited Date/Last Modified : </html>");
        pnlStudentDetails3.add(lblSubDate, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 130, -1));

        pnlReportSub.add(pnlStudentDetails3, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 160, 80));

        pnlStudentDetails2.setBackground(new java.awt.Color(255, 255, 255));
        pnlStudentDetails2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(221, 218, 218), 1, true));
        pnlStudentDetails2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSubStatus2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSubStatus2.setForeground(new java.awt.Color(0, 0, 0));
        lblSubStatus2.setText("Submission Status : ");
        pnlStudentDetails2.add(lblSubStatus2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        pnlReportSub.add(pnlStudentDetails2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 160, 80));

        pnlStudentDetails.setBackground(new java.awt.Color(244, 244, 244));
        pnlStudentDetails.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(221, 218, 218), 1, true));
        pnlStudentDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblSubDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblSubDetails.setForeground(new java.awt.Color(0, 0, 0));
        lblSubDetails.setText("Submission Details : ");
        pnlStudentDetails.add(lblSubDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        pnlReportSub.add(pnlStudentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 170, 160, 80));

        btnSubmitEdit.setBackground(new java.awt.Color(0, 153, 255));
        btnSubmitEdit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSubmitEdit.setForeground(new java.awt.Color(255, 255, 255));
        btnSubmitEdit.setText("Submit/Edit Submissionn");
        btnSubmitEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitEditActionPerformed(evt);
            }
        });
        pnlReportSub.add(btnSubmitEdit, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 540, -1, -1));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setPreferredSize(new java.awt.Dimension(100, 80));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtFile.setEditable(false);
        txtFile.setBackground(new java.awt.Color(221, 218, 218));
        txtFile.setEnabled(false);
        jPanel4.add(txtFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 230, -1));

        btnFile.setText("Select File");
        btnFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFileActionPerformed(evt);
            }
        });
        jPanel4.add(btnFile, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 20, -1, -1));

        pnlReportSub.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 410, 850, -1));

        jPanel3.setBackground(new java.awt.Color(244, 244, 244));
        jPanel3.setPreferredSize(new java.awt.Dimension(100, 80));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblDateTime.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDateTime.setForeground(new java.awt.Color(0, 0, 0));
        jPanel3.add(lblDateTime, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, -1, -1));

        pnlReportSub.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 330, 850, -1));

        pnlStatus.setBackground(new java.awt.Color(255, 255, 255));
        pnlStatus.setPreferredSize(new java.awt.Dimension(100, 80));
        pnlStatus.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblStatus.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblStatus.setForeground(new java.awt.Color(0, 0, 0));
        lblStatus.setText("No Submission");
        pnlStatus.add(lblStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        pnlReportSub.add(pnlStatus, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 250, 850, -1));

        jPanel1.setBackground(new java.awt.Color(244, 244, 244));
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 80));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        intakeLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        intakeLabel1.setForeground(new java.awt.Color(0, 0, 0));
        intakeLabel1.setText("Intake Code : ");
        jPanel1.add(intakeLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, -1, -1));

        txtIntakeCode.setEditable(false);
        txtIntakeCode.setBackground(new java.awt.Color(221, 218, 218));
        txtIntakeCode.setEnabled(false);
        jPanel1.add(txtIntakeCode, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 230, -1));

        txtAssess.setEditable(false);
        txtAssess.setBackground(new java.awt.Color(221, 218, 218));
        txtAssess.setEnabled(false);
        jPanel1.add(txtAssess, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 40, 230, -1));

        lblAssessement.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblAssessement.setForeground(new java.awt.Color(0, 0, 0));
        lblAssessement.setText("Assessement Type : ");
        jPanel1.add(lblAssessement, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 45, -1, -1));

        pnlReportSub.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 850, -1));

        btnRemove.setBackground(new java.awt.Color(255, 0, 0));
        btnRemove.setForeground(new java.awt.Color(255, 255, 255));
        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });
        pnlReportSub.add(btnRemove, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 540, -1, -1));

        lblInfo1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblInfo1.setForeground(new java.awt.Color(255, 0, 0));
        lblInfo1.setText("*Avoid plagiarism");
        pnlReportSub.add(lblInfo1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 500, -1, -1));

        lblBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/img_icon/TransparentBox2.png"))); // NOI18N
        pnlReportSub.add(lblBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlMainReportSub.add(pnlReportSub, "card2");

        add(pnlMainReportSub, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void populateInfo() {
        String filePath = "submission_details.txt"; 
        String currentId = id; 
        Set<String> uniqueIntakes1 = new HashSet<>(); 

        // Check if the file is empty
        File file = new File(filePath);
        if (file.length() == 0) {
            System.out.println("File is empty. Skipping population.");
            return;
        }

        // Proceed if the file is not empty
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(","); 

                if (data.length >= 6) {
                    String id = data[0].trim();  

                    if (id.equalsIgnoreCase(currentId)) {                        
                        // Populate text fields and labels with data
                        txtIntakeCode.setText(data[1]);
                        txtAssess.setText(data[2]);
                        lblStatus.setText(data[3]);
                        lblDateTime.setText(data[4]+ " " + data[5] + " " + data[6]);
                        txtFile.setText(data[7]);
                    }
                } else {
                    System.err.println("Invalid data: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        if(lblStatus.getText().equals("Submitted")){
            pnlStatus.setBackground(Color.GREEN);
        }else{
            pnlStatus.setBackground(Color.WHITE);
        }
    }

    private void populateBox() {
        String filePath = "assign_student_list.txt"; 
        String currentId = id; 
        Set<String> uniqueIntakes1 = new HashSet<>(); 
        //supervisor subpage
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(","); 

                if (data.length >= 6) {
                    String id = data[0].trim();  

                    if (id.equalsIgnoreCase(currentId)) {                        
                        //String intake1 = data[2].trim();
                        txtIntakeCode.setText(data[2]);
                        txtAssess.setText(data[3]);

                    }
                  
                } else {
                    System.err.println("Invalid data : " + line);
                }
            }
        }catch (IOException e) {
            e.printStackTrace();
        }
        
    }

    
    private void btnSubmitEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitEditActionPerformed

        // Get the current date and time
        LocalDateTime currentDateTime = LocalDateTime.now();
        
        // Define a formatter to format the date and time
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("EEEE, d MMMM yyyy, h:mm a", Locale.ENGLISH);
        
        // Format the current date and time
        String formattedDateTime = currentDateTime.format(formatter);
        
        // Display the current date and time
        lblDateTime.setText(formattedDateTime);
        
        String KeyId = id;
        String intakeCode = txtIntakeCode.getText();
        String DateTime = lblDateTime.getText();
        String Assess = txtAssess.getText();
        String status = "Submitted";
        String filePath = txtFile.getText();


        //boolean duplicateFound = false;
        boolean notCompletedForm = false;

        //Validation
        if (filePath.isEmpty() ) {
            notCompletedForm = true;
            JOptionPane.showMessageDialog(this, "Please complete the form");
        }

        //!duplicateFound && 
        if (!notCompletedForm) {
            
              try {
                FileWriter writer = new FileWriter("submission_details.txt", true);
                writer.write(KeyId + "," + intakeCode + "," + Assess + "," + status + "," + DateTime + "," 
                        + filePath);
                writer.write(System.getProperty("line.separator"));

                writer.close();
                JOptionPane.showMessageDialog(null, "Report submitted successfully");
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error : " + e.getMessage(), 
                        "Error", JOptionPane.ERROR_MESSAGE);
            }

        } else {
            JOptionPane.showMessageDialog(this, "Error");
        }
        
        //Add status of submitted
        try {
            // Read all lines from the file
            List<String> lines = Files.readAllLines(Paths.get("status_report.txt"));

            // List to store the updated lines
            List<String> updatedLines = new ArrayList<>();
            

            for (String line : lines) {
                // Split the line into columns
                String[] columns = line.split(",");
                // Check if this is the line we need to edit
                if (columns[0].equals(id)&& columns[2].equals(intakeCode) && columns[3].equals(Assess)) {
                    // Update the specific column
                    columns[6] = "Submitted";
                    
                }


                // Join the columns back into a single line
                updatedLines.add(String.join(",", columns));
            }

            // Write the updated lines back to the file
            Files.write(Paths.get("status_report.txt"), updatedLines);

            //JOptionPane.showMessageDialog(null, "File status updated successfully.");


        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        //Add filepath in assign_student_list.txt
        try {
            // Read all lines from the file
            List<String> lines = Files.readAllLines(Paths.get("assign_student_list.txt"));

            // List to store the updated lines
            List<String> updatedLines = new ArrayList<>();
            

            for (String line : lines) {
                // Split the line into columns
                String[] columns = line.split(",");
                // Check if this is the line we need to edit
                if (columns[0].equals(id)&& columns[2].equals(intakeCode) && columns[3].equals(Assess)) {
                    // Update the specific column
                    columns[12] = filePath;
                    
                }


                // Join the columns back into a single line
                updatedLines.add(String.join(",", columns));
            }

            // Write the updated lines back to the file
            Files.write(Paths.get("assign_student_list.txt"), updatedLines);

            //JOptionPane.showMessageDialog(null, "File status updated successfully.");


        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
        populateInfo();
        
    }//GEN-LAST:event_btnSubmitEditActionPerformed

    private void btnFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFileActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            txtFile.setText(selectedFile.getName());
            try {
                // Specify the target directory
                File targetDirectory = new File("Students\\");
                if (!targetDirectory.exists()) {
                    targetDirectory.mkdirs();
                }

                // Specify the target file location
                File targetFile = new File(targetDirectory, selectedFile.getName());

                // Copy the file to the target location
                Files.copy(selectedFile.toPath(), targetFile.toPath(), StandardCopyOption.REPLACE_EXISTING);
                
                JOptionPane.showMessageDialog(this, "File saved");
            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Failed to save file");
            }
        }
        


    }//GEN-LAST:event_btnFileActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
    // Ask for confirmation before deleting
        int response = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this submission?", "Confirm Deletion",
                JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);

        if (response == JOptionPane.YES_OPTION) {
            String filePath = "submission_details.txt";
            File inputFile = new File(filePath);
            File tempFile = new File("temp_" + filePath);
            String KeyId = id;
            String intakeCode = txtIntakeCode.getText();
            String DateTime = lblDateTime.getText();
            String Assess = txtAssess.getText();
            String filePathS = txtFile.getText();

            try (BufferedReader reader = new BufferedReader(new FileReader(inputFile));
                 BufferedWriter writer = new BufferedWriter(new FileWriter(tempFile))) {

                String line;
                while ((line = reader.readLine()) != null) {
                    String[] data = line.split(",");
                    if (data.length >= 6) {
                        String fileId = data[0].trim();
                        String fileIntakeCode = data[1].trim();
                        String fileAssess = data[2].trim();

                        // Skip the lines that match the criteria
                        if (fileId.equalsIgnoreCase(id) && fileIntakeCode.equalsIgnoreCase(intakeCode) && fileAssess.equalsIgnoreCase(Assess)) {
                            continue;
                        }
                    }
                    writer.write(line);
                    writer.newLine();
                }

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Delete the original file
            if (!inputFile.delete()) {
                JOptionPane.showMessageDialog(null, "Could not delete original file", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            // Rename the temp file to the original file
            if (!tempFile.renameTo(inputFile)) {
                JOptionPane.showMessageDialog(null, "Could not rename temporary file", "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Construct the full path to the file
            File file = new File("Students\\" + filePathS);

            // Check if the file exists and delete it
            if (file.exists()) {
                if (file.delete()) {
                    JOptionPane.showMessageDialog(null, "File deleted successfully");
                    System.out.println("File deleted successfully: " + file.getPath());
                } else {
                    System.out.println("Failed to delete file: " + file.getPath());
                }
            } else {
                System.out.println("File not found: " + file.getPath());
            }

            // Remove status of submitted
            try {
                // Read all lines from the file
                List<String> lines = Files.readAllLines(Paths.get("status_report.txt"));

                // List to store the updated lines
                List<String> updatedLines = new ArrayList<>();

                for (String line : lines) {
                    // Split the line into columns
                    String[] columns = line.split(",");
                    // Check if this is the line we need to edit
                    if (columns[0].equals(id) && columns[2].equals(intakeCode) && columns[3].equals(Assess)) {
                        // Update the specific column
                        columns[6] = "Pending";
                    }

                    // Join the columns back into a single line
                    updatedLines.add(String.join(",", columns));
                }

                // Write the updated lines back to the file
                Files.write(Paths.get("status_report.txt"), updatedLines);

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error updating file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Remove file path in assign_student_list.txt
            try {
                // Read all lines from the file
                List<String> lines = Files.readAllLines(Paths.get("assign_student_list.txt"));

                // List to store the updated lines
                List<String> updatedLines = new ArrayList<>();

                for (String line : lines) {
                    // Split the line into columns
                    String[] columns = line.split(",");
                    // Check if this is the line we need to edit
                    if (columns[0].equals(id) && columns[2].equals(intakeCode) && columns[3].equals(Assess)) {
                        // Update the specific column
                        columns[12] = "-";
                    }

                    // Join the columns back into a single line
                    updatedLines.add(String.join(",", columns));
                }

                // Write the updated lines back to the file
                Files.write(Paths.get("assign_student_list.txt"), updatedLines);

            } catch (IOException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Error updating file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }

            // Reset UI components and repopulate data
            populateBox();
            lblStatus.setText("No Submission");
            pnlStatus.setBackground(Color.WHITE);
            lblDateTime.setText("");
            txtFile.setText("");
            populateInfo();
        }
    }//GEN-LAST:event_btnRemoveActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnFile;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSubmitEdit;
    private javax.swing.JLabel intakeLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel lblAssessement;
    private javax.swing.JLabel lblBox;
    private javax.swing.JLabel lblDateTime;
    private javax.swing.JLabel lblInfo;
    private javax.swing.JLabel lblInfo1;
    private javax.swing.JLabel lblReportSub;
    private javax.swing.JLabel lblReportSubTitle;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JLabel lblSubDate;
    private javax.swing.JLabel lblSubDetails;
    private javax.swing.JLabel lblSubFile;
    private javax.swing.JLabel lblSubStatus2;
    private javax.swing.JLayeredPane pnlMainReportSub;
    private javax.swing.JPanel pnlReportSub;
    private javax.swing.JPanel pnlStatus;
    private javax.swing.JPanel pnlStudentDetails;
    private javax.swing.JPanel pnlStudentDetails2;
    private javax.swing.JPanel pnlStudentDetails3;
    private javax.swing.JPanel pnlStudentDetails4;
    private javax.swing.JTextField txtAssess;
    private javax.swing.JTextField txtFile;
    private javax.swing.JTextField txtIntakeCode;
    // End of variables declaration//GEN-END:variables
}
