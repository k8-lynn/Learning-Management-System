/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package system;

import Design.CurvedScrollBarUI;
import Design.CustomCellRenderer;
import Design.CustomHeaderRenderer;
import Design.CustomTableCellRenderer;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nisha
 */
public class ReportEvaluationSupervisor extends javax.swing.JPanel {

    /**
     * Creates new form StudentRegistrationList
     */
    public String id; 
    LoginPage login = new LoginPage();
    public String role;



    public ReportEvaluationSupervisor() {
        initComponents();

    
        lblReportEvaSTitle.setText("Mark As "+login.getRole());
 
        String input = login.getUsername();
        String[] parts = input.split("-");
        if (parts.length > 1) {
            id = parts[1];
        }
        
        //REPORT CODE
        populateReIntakeComboBox();
        intakeComboBox1.addActionListener((ActionEvent e) -> {
            String selectedIntake = (String) intakeComboBox1.getSelectedItem(); 
            nameComboBox1.removeAllItems();
            if (selectedIntake != null) {
                populateNameComboBox(selectedIntake, nameComboBox1); }
            if(!intakeComboBox1.getSelectedItem().equals("Select Intake")) {
            intakeComboBox1.removeItem("Select Intake");}
        });
  
//        if(subLabel1.getText().equals("-")){
//           subLabel1.setText("");
//        }
//            
        nameComboBox1.addActionListener((ActionEvent e) -> {            
            String selectedIntake = (String) intakeComboBox1.getSelectedItem();
            String selectedStudent = (String) nameComboBox1.getSelectedItem();
            if (selectedIntake != null && selectedStudent != null && !selectedIntake.equals("Select Intake") && !selectedStudent.equals("Select Student")) {
                populateLabels(selectedIntake, selectedStudent, assessmentLabel1, subLabel1);
            }
        });
  
       subLabel1.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                if (e.getClickCount() == 2) { 
                    String fileName = subLabel1.getText();
                    if (!fileName.equals("No file submitted")) {
                        String filePath = "Students\\" + fileName;
                        try {
                            File fileToOpen = new File(filePath);
                            if (fileToOpen.exists()) {
                                Desktop.getDesktop().open(fileToOpen);
                            } else {
                                System.err.println("File not found: " + filePath);
                            }
                        } catch (IOException ex) {
                            ex.printStackTrace();
                        }
                    }
                }
            }
        });




 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainReportEvaS = new javax.swing.JLayeredPane();
        pnlReportEvaS = new javax.swing.JPanel();
        lblReportEvaSTitle = new javax.swing.JLabel();
        lblReportEva = new javax.swing.JLabel();
        lblReportMarkEva = new javax.swing.JLabel();
        lblStudentDetails = new javax.swing.JLabel();
        pnlStudentDetails1 = new javax.swing.JPanel();
        txtGrade = new javax.swing.JTextField();
        reviewLabelSMarker = new javax.swing.JLabel();
        reviewTextField2 = new javax.swing.JTextField();
        reviewTextField1 = new javax.swing.JTextField();
        lblMark = new javax.swing.JLabel();
        lblGrade = new javax.swing.JLabel();
        txtMark = new javax.swing.JTextField();
        reviewLabel1 = new javax.swing.JLabel();
        pnlStudentDetails = new javax.swing.JPanel();
        lblKeyId = new javax.swing.JLabel();
        assessmentLabel1 = new javax.swing.JTextField();
        submissionLabel1 = new javax.swing.JLabel();
        intakeLabel1 = new javax.swing.JLabel();
        assessLabel1 = new javax.swing.JLabel();
        subLabel1 = new javax.swing.JLabel();
        nameComboBox1 = new javax.swing.JComboBox<>();
        intakeComboBox1 = new javax.swing.JComboBox<>();
        submitButton1 = new javax.swing.JButton();
        lblBox = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1075, 650));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMainReportEvaS.setPreferredSize(new java.awt.Dimension(1075, 650));
        pnlMainReportEvaS.setLayout(new java.awt.CardLayout());

        pnlReportEvaS.setBackground(new java.awt.Color(255, 255, 255));
        pnlReportEvaS.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblReportEvaSTitle.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblReportEvaSTitle.setForeground(new java.awt.Color(0, 0, 0));
        lblReportEvaSTitle.setText("Mark As");
        pnlReportEvaS.add(lblReportEvaSTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, -1, -1));

        lblReportEva.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblReportEva.setForeground(new java.awt.Color(29, 62, 105));
        lblReportEva.setText("Report Evaluation");
        pnlReportEvaS.add(lblReportEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, -1, -1));

        lblReportMarkEva.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblReportMarkEva.setForeground(new java.awt.Color(29, 62, 105));
        lblReportMarkEva.setText("Mark & Review Report");
        pnlReportEvaS.add(lblReportMarkEva, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 390, -1, -1));

        lblStudentDetails.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblStudentDetails.setForeground(new java.awt.Color(29, 62, 105));
        lblStudentDetails.setText("Student Details & Submission");
        pnlReportEvaS.add(lblStudentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 150, -1, -1));

        pnlStudentDetails1.setBackground(new java.awt.Color(244, 244, 244));
        pnlStudentDetails1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(221, 218, 218), 1, true));
        pnlStudentDetails1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtGrade.setBackground(new java.awt.Color(221, 218, 218));
        txtGrade.setForeground(new java.awt.Color(0, 0, 0));
        txtGrade.setEnabled(false);
        pnlStudentDetails1.add(txtGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(313, 25, 90, -1));

        reviewLabelSMarker.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        reviewLabelSMarker.setForeground(new java.awt.Color(29, 62, 105));
        reviewLabelSMarker.setText("Second Marker Review : ");
        pnlStudentDetails1.add(reviewLabelSMarker, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 40, -1, -1));

        reviewTextField2.setBackground(new java.awt.Color(221, 218, 218));
        pnlStudentDetails1.add(reviewTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 65, 410, 90));

        reviewTextField1.setBackground(new java.awt.Color(221, 218, 218));
        pnlStudentDetails1.add(reviewTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 65, 410, 90));

        lblMark.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblMark.setForeground(new java.awt.Color(0, 0, 0));
        lblMark.setText("Mark :");
        pnlStudentDetails1.add(lblMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 40, -1));

        lblGrade.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblGrade.setForeground(new java.awt.Color(0, 0, 0));
        lblGrade.setText("Grade:");
        pnlStudentDetails1.add(lblGrade, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 30, -1, -1));

        txtMark.setBackground(new java.awt.Color(221, 218, 218));
        txtMark.setForeground(new java.awt.Color(0, 0, 0));
        txtMark.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMarkKeyReleased(evt);
            }
        });
        pnlStudentDetails1.add(txtMark, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 25, 90, -1));

        reviewLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        reviewLabel1.setForeground(new java.awt.Color(0, 0, 0));
        reviewLabel1.setText("Review:");
        pnlStudentDetails1.add(reviewLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 70, -1, -1));

        pnlReportEvaS.add(pnlStudentDetails1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 410, 1035, 170));

        pnlStudentDetails.setBackground(new java.awt.Color(244, 244, 244));
        pnlStudentDetails.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(221, 218, 218), 1, true));
        pnlStudentDetails.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblKeyId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblKeyId.setForeground(new java.awt.Color(0, 0, 0));
        lblKeyId.setText("Student Name : ");
        pnlStudentDetails.add(lblKeyId, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 60, 90, -1));

        assessmentLabel1.setEditable(false);
        assessmentLabel1.setBackground(new java.awt.Color(221, 218, 218));
        assessmentLabel1.setEnabled(false);
        pnlStudentDetails.add(assessmentLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 100, 230, -1));

        submissionLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        submissionLabel1.setForeground(new java.awt.Color(0, 0, 0));
        submissionLabel1.setText("Submission:");
        pnlStudentDetails.add(submissionLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 160, -1, -1));

        intakeLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        intakeLabel1.setForeground(new java.awt.Color(0, 0, 0));
        intakeLabel1.setText("Intake Code : ");
        pnlStudentDetails.add(intakeLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, -1, -1));

        assessLabel1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        assessLabel1.setForeground(new java.awt.Color(0, 0, 0));
        assessLabel1.setText("Assessment Type:");
        pnlStudentDetails.add(assessLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, -1, -1));

        subLabel1.setBackground(new java.awt.Color(221, 218, 218));
        subLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        subLabel1.setForeground(new java.awt.Color(0, 153, 255));
        subLabel1.setToolTipText("Double click to open the file");
        subLabel1.setAlignmentX(0.5F);
        subLabel1.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 1, 0, new java.awt.Color(51, 153, 255)));
        subLabel1.setOpaque(true);
        pnlStudentDetails.add(subLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 160, 260, 23));

        nameComboBox1.setBackground(new java.awt.Color(204, 204, 204));
        nameComboBox1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        pnlStudentDetails.add(nameComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 60, 230, -1));

        intakeComboBox1.setBackground(new java.awt.Color(204, 204, 204));
        intakeComboBox1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));
        pnlStudentDetails.add(intakeComboBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 20, 230, -1));

        pnlReportEvaS.add(pnlStudentDetails, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 170, 1035, 200));

        submitButton1.setBackground(new java.awt.Color(0, 153, 255));
        submitButton1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        submitButton1.setForeground(new java.awt.Color(255, 255, 255));
        submitButton1.setText("Submit");
        submitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButton1ActionPerformed(evt);
            }
        });
        pnlReportEvaS.add(submitButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(510, 605, -1, -1));

        lblBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/img_icon/TransparentBox2.png"))); // NOI18N
        pnlReportEvaS.add(lblBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlMainReportEvaS.add(pnlReportEvaS, "card2");

        add(pnlMainReportEvaS, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

       //REPORT PAGE
    private void populateReIntakeComboBox() {
        String filePath = "assign_student_list.txt"; 
        String currentSupervisor = id; 
        Set<String> uniqueIntakes1 = new HashSet<>(); 
        //supervisor subpage
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(","); 

                // (ID, StudentName, Intake, Assessment, Supervisor, Marker)
                if (data.length >= 6) {
                    String supervisor = data[6].trim(); 
                    String marker = data[8].trim(); 

                    //for supervisor 
                    if (supervisor.equalsIgnoreCase(currentSupervisor)) {                        
                        String intake1 = data[2].trim(); 
                        if (!uniqueIntakes1.contains(intake1)) {
                            intakeComboBox1.addItem(intake1);
                            uniqueIntakes1.add(intake1); 
                        }
                    }
                  
                } else {
                    System.err.println("Invalid data format: " + line);
                }
            }
        }catch (IOException e) {
            e.printStackTrace();
        }
        intakeComboBox1.insertItemAt("Select Intake",0);        
        intakeComboBox1.setSelectedIndex(0);

        
    }
    private void populateNameComboBox(String selectedIntake, JComboBox<String> ScomboBox) {
        String filePath = "assign_student_list.txt"; 
        String currentSupervisor = id; // Get current supervisor
        List<String> supervisorStudent = new ArrayList<>(); //store names to sort
        List<String> markerStudent = new ArrayList<>();
        System.out.println("Selected Intake: " + selectedIntake);
        System.out.println("Current Supervisor: " + currentSupervisor);
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(","); 
                if (data.length >= 6) {
                    String studentID = data[0].trim();
                    String student = data[1].trim();
                    String intake = data[2].trim(); 
                    String supervisor = data[6].trim(); 
                    String marker = data[8].trim(); 
                    //check error
                    System.out.println("Student: " + student);
                    System.out.println("Supervisor: " + supervisor);
                    System.out.println("Intake: " + intake);
                    if (currentSupervisor.equalsIgnoreCase(supervisor) && selectedIntake.equalsIgnoreCase(intake)) {
                        supervisorStudent.add(studentID + " - " + student);                         
                    }
                    if(currentSupervisor.equalsIgnoreCase(marker) && selectedIntake.equalsIgnoreCase(intake)) {
                        markerStudent.add(studentID + " - " + student);                         
                    }
                } else {
                    System.err.println("Invalid data format: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        Collections.sort(supervisorStudent);       
        for (String student : supervisorStudent) {
            ScomboBox.addItem(student);
        }


    }
    private void populateLabels(String selectedIntake, String selectedStudent, JTextField assessmentLabel, JLabel subLabel) {
        String filePath = "assign_student_list.txt"; 

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 7) {
                    String intake = data[2].trim();
                    String student = data[1].trim();
                    String studentID = data[0].trim();
                    if (selectedIntake.equalsIgnoreCase(intake) && selectedStudent.equalsIgnoreCase(studentID + " - " + student)) {
                        String assessment = data[3].trim();
                        String reportPath = data[12].trim(); 
                        System.out.println("Report name: " + reportPath);//check
                        assessmentLabel.setText(assessment);
                        if(reportPath.equals("-")){
                            subLabel.setText("No file submitted");
                        }else{
                            subLabel.setText(reportPath);
                        }
                        displaygradeAndreview();
                        break;
                    }                    
                } else {
                    System.err.println("Other intake: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void displaygradeAndreview(){
        String filePath = "reportEvaluation.txt";
        String reportname1 = subLabel1.getText().trim();
        //check the data read is correct
        System.out.println("subLabel: " + reportname1);
        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                //check
                System.out.println("Line: " + line);
                String[] data = line.split("\\|");
                if (data.length == 4) {
                    String stureport = data[0].trim();
                    String grade = data[1].trim();
                    String sreview = data[2].trim();
                    String mreview = data[3].trim();
                    if (stureport.equals(reportname1)) {
                        txtGrade.setText(grade);
                        reviewTextField1.setText(sreview);
                        reviewTextField2.setText(mreview);

                        break;
                    }    

                    else{
                        txtGrade.setText("0");
                        reviewTextField1.setText("");

                    }
                } else {
                    System.err.println("Not selected: " + line);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    
    private void submitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButton1ActionPerformed
        String grade1 = txtGrade.getText();
        String review1 = reviewTextField1.getText();
        List <String> updatedreport = new ArrayList<>();
        String filepath = "reportEvaluation.txt";
        String stureport= "";

        File file = new File(filepath);
        boolean fileExists = file.exists();
        boolean fileIsEmpty = file.length() == 0;

        // If the file exists and is not empty, read and update its content
        if (fileExists && !fileIsEmpty) {
            try (BufferedReader br = new BufferedReader(new FileReader(filepath))) {
                String line;
                while ((line = br.readLine()) != null) {
                    // Check and print the line for debugging
                    System.out.println("Line: " + line);
                    String[] data = line.split("\\|");
                    if (data.length == 4) {
                        stureport = data[0].trim();
                        String grade = data[1].trim();
                        String sreview = data[2].trim();
                        String mreview = data[3].trim();
                        if (stureport.equals(subLabel1.getText().trim())) {
                            updatedreport.add(subLabel1.getText() + "|" + grade1 + "|" + review1 + "|" + mreview);
                        } else {
                            updatedreport.add(stureport + "|" + grade + "|" + sreview + "|" + mreview);
                        }
                        System.out.println("updatedreport: " + updatedreport); // Check updated report for debugging
                        JOptionPane.showMessageDialog(this, "Mark entered");
                    }
                    if(stureport.equals("")){
                        updatedreport.add(subLabel1.getText() + "|" + grade1 + "|" + review1 + "|" + "-");
                        JOptionPane.showMessageDialog(this, "Mark entered");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        } else {
            // If the file is empty or does not exist, add new data directly
            updatedreport.add(subLabel1.getText() + "|" + grade1 + "|" + review1 + "|" + "-");
            JOptionPane.showMessageDialog(this, "Mark entered");
            
        }

        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filepath, false))) {
            for (String line : updatedreport) {
                bw.write(line);
                bw.newLine();}

        } catch (IOException e) {
            e.printStackTrace();
        }
        //Add status of marking
        try {
            // Read all lines from the file
            List<String> lines = Files.readAllLines(Paths.get("status_report.txt"));

            // List to store the updated lines
            List<String> updatedLines = new ArrayList<>();
            
            String nameId = nameComboBox1.getSelectedItem().toString();
            String[] parts = nameId.split("-");
            if (parts.length > 1) {
                nameId = parts[0].trim();
            }

            for (String line : lines) {
                // Split the line into columns
                String[] columns = line.split(",");
                System.out.println(id+nameId.trim()+intakeComboBox1.getSelectedItem().toString()+assessmentLabel1.getText());
                // Check if this is the line we need to edit
                if (columns[7].equals(id)&& columns[0].equals(nameId) && columns[2].equals(intakeComboBox1.getSelectedItem().toString())&& columns[3].equals(assessmentLabel1.getText())) {
                    // Update the specific column
                    System.out.println("yes");
                    columns[9] = "Marked";
                    
                }


                // Join the columns back into a single line
                updatedLines.add(String.join(",", columns));
            }

            // Write the updated lines back to the file
            Files.write(Paths.get("status_report.txt"), updatedLines);

            JOptionPane.showMessageDialog(null, "File status updated successfully.");


        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error updating file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_submitButton1ActionPerformed

    private void txtMarkKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMarkKeyReleased
        Supervisor supervisor = new Supervisor();
        txtGrade.setText(supervisor.markGrade(Integer.parseInt(txtMark.getText())));
    }//GEN-LAST:event_txtMarkKeyReleased



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel assessLabel1;
    private javax.swing.JTextField assessmentLabel1;
    private javax.swing.JComboBox<String> intakeComboBox1;
    private javax.swing.JLabel intakeLabel1;
    private javax.swing.JLabel lblBox;
    private javax.swing.JLabel lblGrade;
    private javax.swing.JLabel lblKeyId;
    private javax.swing.JLabel lblMark;
    private javax.swing.JLabel lblReportEva;
    private javax.swing.JLabel lblReportEvaSTitle;
    private javax.swing.JLabel lblReportMarkEva;
    private javax.swing.JLabel lblStudentDetails;
    private javax.swing.JComboBox<String> nameComboBox1;
    private javax.swing.JLayeredPane pnlMainReportEvaS;
    private javax.swing.JPanel pnlReportEvaS;
    private javax.swing.JPanel pnlStudentDetails;
    private javax.swing.JPanel pnlStudentDetails1;
    private javax.swing.JLabel reviewLabel1;
    private javax.swing.JLabel reviewLabelSMarker;
    private javax.swing.JTextField reviewTextField1;
    private javax.swing.JTextField reviewTextField2;
    private javax.swing.JLabel subLabel1;
    private javax.swing.JLabel submissionLabel1;
    private javax.swing.JButton submitButton1;
    private javax.swing.JTextField txtGrade;
    private javax.swing.JTextField txtMark;
    // End of variables declaration//GEN-END:variables
}
