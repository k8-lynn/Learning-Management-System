/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package system;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author nisha
 */
public class Dashboard extends javax.swing.JPanel {

    /**
     * Creates new form Dashboard
     */
    public Dashboard() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnFolder = new javax.swing.JButton();
        btnCreate = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnFolder.setText("Folder");
        btnFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFolderActionPerformed(evt);
            }
        });
        add(btnFolder, new org.netbeans.lib.awtextra.AbsoluteConstraints(119, 77, -1, -1));

        btnCreate.setText("Create");
        btnCreate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateActionPerformed(evt);
            }
        });
        add(btnCreate, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 150, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFolderActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        int option = fileChooser.showOpenDialog(null);

        if (option == JFileChooser.APPROVE_OPTION) {
            File selectedFile = fileChooser.getSelectedFile();
            int deleteOption = JOptionPane.showConfirmDialog(null, "Do you want to delete this file/directory?", "Delete", JOptionPane.YES_NO_OPTION);

            if (deleteOption == JOptionPane.YES_OPTION) {
                if (selectedFile.isDirectory()) {
                    deleteDirectory(selectedFile);
                    System.out.println("Directory and its contents have been deleted: " + selectedFile.getName());
                } else {
                    if (selectedFile.delete()) {
                        System.out.println("File deleted: " + selectedFile.getName());
                    } else {
                        System.out.println("Failed to delete the file.");
                    }
                }
            } else {
                System.out.println("File deletion cancelled.");
            }
        }
    }//GEN-LAST:event_btnFolderActionPerformed

    private void btnCreateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateActionPerformed
        createFoldersForLecturers();
    }//GEN-LAST:event_btnCreateActionPerformed

    public static void deleteDirectory(File directory) {
        if (directory.isDirectory()) {
            File[] files = directory.listFiles();
            if (files != null) {
                for (File file : files) {
                    deleteDirectory(file); // Recursive call
                }
            }
        }
        directory.delete();
    }
    
    public void createFoldersForLecturers() {
        createMainFolderAndSubfolders("Lecturers", "lecturer_list.txt");
    }

    private void createMainFolderAndSubfolders(String mainFolderName, String listFileName) {
        File mainFolder = new File(mainFolderName);
        if (!mainFolder.exists()) {
            if (mainFolder.mkdir()) {
                System.out.println("Main folder created: " + mainFolderName);
            } else {
                System.out.println("Failed to create main folder: " + mainFolderName);
                return;
            }
        }

        File file = new File(listFileName);
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length > 0) {
                    String id = parts[0].trim();
                    String name = parts[2].trim();
                    String folderName = id + "-" + name;
                    File subFolder = new File(mainFolder, folderName);
                    if (!subFolder.exists()) {
                        if (subFolder.mkdir()) {
                            System.out.println("Folder created for " + mainFolderName.substring(0, mainFolderName.length() - 1) + ": " + id);
                        } else {
                            System.out.println("Failed to create folder for " + mainFolderName.substring(0, mainFolderName.length() - 1) + ": " + id);
                        }
                    } else {
                        System.out.println("Folder already exists for " + mainFolderName.substring(0, mainFolderName.length() - 1) + ": " + id);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreate;
    private javax.swing.JButton btnFolder;
    // End of variables declaration//GEN-END:variables
}
