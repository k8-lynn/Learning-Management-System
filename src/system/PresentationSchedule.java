/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package system;

import Design.CurvedScrollBarUI;
import Design.CustomCellRenderer;
import Design.CustomHeaderRenderer;
import Design.CustomTableCellRenderer;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.text.DateFormat;
import java.text.MessageFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.stream.Collectors;
import javax.swing.BorderFactory;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableColumnModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author nisha
 */
public class PresentationSchedule extends javax.swing.JPanel {

    /**
     * Creates new form StudentRegistrationList
     */
    DefaultTableModel model;
    public String idSuper; 
    LoginPage login = new LoginPage();

    public PresentationSchedule() {
        initComponents();
          // Set custom scroll bar UI for jScrollPane2
        jScrollPane2.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane2.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane2.getVerticalScrollBar().setUI(new CurvedScrollBarUI());
        jScrollPane2.getHorizontalScrollBar().setUI(new CurvedScrollBarUI());
        jScrollPane3.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        jScrollPane3.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
        jScrollPane3.getVerticalScrollBar().setUI(new CurvedScrollBarUI());
        jScrollPane3.getHorizontalScrollBar().setUI(new CurvedScrollBarUI());

        requestTable.getTableHeader().setDefaultRenderer(new CustomHeaderRenderer());
        requestTable.setDefaultRenderer(Object.class, new CustomCellRenderer());

        // Set the row height and curve radius
        requestTable.setRowHeight(20); // Set row height
        requestTable.setIntercellSpacing(new Dimension(0, 0)); // Remove cell spacing
        requestTable.setShowGrid(false); // Hide grid lines
        requestTable.setShowHorizontalLines(true);
       
        setTableHeaderHeight(requestTable, 30); // Set header height
        
        scheduleTable.getTableHeader().setDefaultRenderer(new CustomHeaderRenderer());
        scheduleTable.setDefaultRenderer(Object.class, new CustomCellRenderer());

        // Set the row height and curve radius
        scheduleTable.setRowHeight(20); // Set row height
        scheduleTable.setIntercellSpacing(new Dimension(0, 0)); // Remove cell spacing
        scheduleTable.setShowGrid(false); // Hide grid lines
        scheduleTable.setShowHorizontalLines(true);
       
        setTableHeaderHeight(scheduleTable, 30); // Set header height
     

 
        String input = login.getUsername();;
        String[] parts = input.split("-");
        if (parts.length > 1) {
            idSuper = parts[1];
        }
        
        //PRESENTATION CODE
        populateRequestTable();
        populateScheduleTable();
        sortScheduleTable();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlMainPresentation = new javax.swing.JLayeredPane();
        pnlPresentation = new javax.swing.JPanel();
        lblPresentationTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        scheduleTable = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        requestTable = new javax.swing.JTable();
        btnReject = new javax.swing.JButton();
        btnAccept = new javax.swing.JButton();
        lblPrint = new javax.swing.JLabel();
        lblStudPresentationSch = new javax.swing.JLabel();
        lblStudPresentationReq = new javax.swing.JLabel();
        lblBox = new javax.swing.JLabel();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1075, 650));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        pnlMainPresentation.setPreferredSize(new java.awt.Dimension(1075, 650));
        pnlMainPresentation.setLayout(new java.awt.CardLayout());

        pnlPresentation.setBackground(new java.awt.Color(255, 255, 255));
        pnlPresentation.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lblPresentationTitle.setFont(new java.awt.Font("Segoe UI", 1, 15)); // NOI18N
        lblPresentationTitle.setForeground(new java.awt.Color(0, 0, 0));
        lblPresentationTitle.setText("Presenation Schedule Request and Slots");
        pnlPresentation.add(lblPresentationTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 35, -1, -1));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane3.setPreferredSize(new java.awt.Dimension(456, 210));

        scheduleTable.setBackground(new java.awt.Color(255, 255, 255));
        scheduleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student", "Intake", "Assessment", "Present Date", "Time"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(scheduleTable);

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 990, -1));

        pnlPresentation.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 400, 1010, 230));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(204, 204, 204)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 1, 1, 1, new java.awt.Color(255, 255, 255)));

        requestTable.setBackground(new java.awt.Color(255, 255, 255));
        requestTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Student", "Intake", "Assessment", "Date Request", "Time Slot Request", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        requestTable.setSelectionForeground(new java.awt.Color(51, 255, 0));
        requestTable.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(requestTable);

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 990, 210));

        pnlPresentation.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 120, 1010, 230));

        btnReject.setBackground(new java.awt.Color(255, 0, 0));
        btnReject.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnReject.setForeground(new java.awt.Color(255, 255, 255));
        btnReject.setText("Reject");
        btnReject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRejectActionPerformed(evt);
            }
        });
        pnlPresentation.add(btnReject, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 353, -1, -1));

        btnAccept.setBackground(new java.awt.Color(0, 255, 0));
        btnAccept.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnAccept.setForeground(new java.awt.Color(255, 255, 255));
        btnAccept.setText("Approve");
        btnAccept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAcceptActionPerformed(evt);
            }
        });
        pnlPresentation.add(btnAccept, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 353, -1, -1));

        lblPrint.setForeground(new java.awt.Color(51, 153, 255));
        lblPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/img_icon/iconPrint.png"))); // NOI18N
        lblPrint.setText("Print");
        lblPrint.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblPrintMouseClicked(evt);
            }
        });
        pnlPresentation.add(lblPrint, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 35, -1, -1));

        lblStudPresentationSch.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblStudPresentationSch.setForeground(new java.awt.Color(29, 62, 105));
        lblStudPresentationSch.setText("Student Presentationn Schedule");
        pnlPresentation.add(lblStudPresentationSch, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, -1, -1));

        lblStudPresentationReq.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblStudPresentationReq.setForeground(new java.awt.Color(29, 62, 105));
        lblStudPresentationReq.setText("Student Presentationn Request");
        pnlPresentation.add(lblStudPresentationReq, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 90, -1, -1));

        lblBox.setIcon(new javax.swing.ImageIcon(getClass().getResource("/system/img_icon/TransparentBox2.png"))); // NOI18N
        pnlPresentation.add(lblBox, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        pnlMainPresentation.add(pnlPresentation, "card2");

        add(pnlMainPresentation, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));
    }// </editor-fold>//GEN-END:initComponents

    private void btnAcceptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAcceptActionPerformed
        updateRequestAndScheduleTables(true);
        populateRequestTable();
    }//GEN-LAST:event_btnAcceptActionPerformed

    private void btnRejectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRejectActionPerformed
        updateRequestAndScheduleTables(false);  
        populateRequestTable();
    }//GEN-LAST:event_btnRejectActionPerformed

    private void lblPrintMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblPrintMouseClicked
        // TODO add your handling code here:
        MessageFormat header = new MessageFormat("Presentation Schedule\n");
        MessageFormat footer = new MessageFormat("\nAGHUB");

        try{
            scheduleTable.print(JTable.PrintMode.FIT_WIDTH, header, footer);
        }catch(PrinterException e){
            JOptionPane.showMessageDialog(null,"Cannot be print ! " +e.getMessage());
        }
    }//GEN-LAST:event_lblPrintMouseClicked

       // Method to set table header height
    private void setTableHeaderHeight(JTable table, int height) {
        JTableHeader header = table.getTableHeader();
        TableColumnModel columnModel = header.getColumnModel();
        for (int i = 0; i < columnModel.getColumnCount(); i++) {
            TableColumn column = columnModel.getColumn(i);
            column.setHeaderRenderer(new Design.HeaderRenderer(height));
            column.setPreferredWidth(150); // Set preferred column width
        }
        header.setPreferredSize(new Dimension(header.getWidth(), height));
    }
      //PRESENTATION CODE
    private void populateRequestTable() {
        DefaultTableModel requestTableModel = (DefaultTableModel) requestTable.getModel();
        requestTableModel.setRowCount(0); // Clear existing rows

        String presentationRequestFile = "presentation_list.txt";
        String studentDetailFile = "assign_student_list.txt";

        Map<String, String> studentSupervisors = new HashMap<>();

        // Read student details and store supervisor information
        try (BufferedReader br = new BufferedReader(new FileReader(studentDetailFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] details = line.split(",");
                    if (details.length >= 5) { // Ensure there are enough elements
                        String id = details[0];
                        String intake = details[2];
                        String supervisor = details[6];
                        String key = id + "_" + intake;
                        studentSupervisors.put(key, supervisor);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Read presentation requests and populate the table
        try (BufferedReader br = new BufferedReader(new FileReader(presentationRequestFile))) {
            String line;
            while ((line = br.readLine()) != null) {
                line = line.trim();
                if (!line.isEmpty()) {
                    String[] data = line.split(",");
                    if (data.length >= 7) { // Ensure there are enough elements
                        String id = data[0];
                        String intake = data[2];
                        String assessment = data[3];
                        String date = data[4];
                        String time = data[5];
                        String status = data[6];
                        String key = id + "_" + intake;

                        String supervisor = studentSupervisors.get(key);

                        System.out.println("Checking request for student ID: " + id);
                        System.out.println("Expected supervisor: " + idSuper);
                        System.out.println("Found supervisor: " + supervisor);

                        if (supervisor != null && supervisor.equals(idSuper) && status.equals("PENDING")) {
                            Object[] rowData = {id, data[1], intake, assessment, date, time, false};
                            requestTableModel.addRow(rowData);
                            System.out.println("Added row: " + java.util.Arrays.toString(rowData));
                        }
                    } else {
                        System.err.println("Invalid data format: " + line);
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
                                                            
    private void sortScheduleTable() {
        DefaultTableModel scheduleTableModel = (DefaultTableModel) scheduleTable.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(scheduleTableModel);

        sorter.setComparator(4, new Comparator<String>() {
            private final SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy");

            @Override
            public int compare(String date1, String date2) {//compare both date
                try {
                    return dateFormat.parse(date1).compareTo(dateFormat.parse(date2));
                } catch (ParseException e) {
                    throw new IllegalArgumentException(e);
                }
            }
        });

        sorter.setComparator(5, new Comparator<String>() {
            @Override
            public int compare(String time1, String time2) {
                return time1.substring(0, 4).compareTo(time2.substring(0, 4));
            }
        });

        scheduleTable.setRowSorter(sorter);

        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        sortKeys.add(new RowSorter.SortKey(4, SortOrder.ASCENDING)); // Sort by date
        sortKeys.add(new RowSorter.SortKey(5, SortOrder.ASCENDING)); // Sort by start time (first 4 characters)

        sorter.setSortKeys(sortKeys);
        sorter.sort();
    }
    private void updateRequestAndScheduleTables(boolean isApproved) {
        DefaultTableModel requestTableModel = (DefaultTableModel) requestTable.getModel();
        DefaultTableModel scheduleTableModel = (DefaultTableModel) scheduleTable.getModel();
        List<String> remainingRequests = new ArrayList<>();
        List<String> updatedRequests = new ArrayList<>();

        int rowCount = requestTableModel.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            Boolean isChecked = (Boolean) requestTableModel.getValueAt(i, requestTableModel.getColumnCount() - 1);
            if (isChecked != null && isChecked) {
                String id = requestTableModel.getValueAt(i, 0).toString();
                String student = requestTableModel.getValueAt(i, 1).toString();
                String intake = requestTableModel.getValueAt(i, 2).toString();
                String assessment = requestTableModel.getValueAt(i, 3).toString();
                String date = requestTableModel.getValueAt(i, 4).toString();
                String time = requestTableModel.getValueAt(i, 5).toString();
                String status = isApproved ? "APPROVED" : "REJECTED"; // Corrected status assignment

                updatedRequests.add(id + "," + student + "," + intake + "," + assessment + "," + date + "," + time + "," + status);
                if (isApproved) {
                    scheduleTableModel.addRow(new Object[]{id, student, intake, assessment, date, time, status});
                }
            } else {
                StringBuilder sb = new StringBuilder();
                for (int j = 0; j < requestTableModel.getColumnCount() - 1; j++) {
                    sb.append(requestTableModel.getValueAt(i, j)).append(",");
                }
                sb.append("PENDING"); // Retain the current status for remaining requests
                remainingRequests.add(sb.toString());
            }
        }

        updateRequestFile(remainingRequests, updatedRequests);
    }
    private void updateRequestFile(List<String> remainingRequests, List<String> updatedRequests) {
        String filePath = "presentation_list.txt";
        List<String> updatedDataLines = new ArrayList<>();

        try (BufferedReader br = new BufferedReader(new FileReader(filePath))) {
            String line;
            while ((line = br.readLine()) != null) {
                String[] data = line.split(",");
                if (data.length >= 7) {
                    String id = data[0];
                    String intake = data[2];   
                    String name = data[1];
                    String assess = data[3];
                    String date = data[4];
                    String time = data[5];
                    for (String updatedRequest : updatedRequests) {
                        String[] updatedData = updatedRequest.split(",");
                        if (updatedData[0].equals(id) && updatedData[2].equals(intake) && updatedData[1].equals(name) && updatedData[4].equals(date) && updatedData[5].equals(time)) {
                            line = updatedRequest; // Replace the line with updated data
                            break;
                        }
                    }
                }
                updatedDataLines.add(line);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Write the updated data back to the file
        try (BufferedWriter bw = new BufferedWriter(new FileWriter(filePath, false))) {
            for (String updatedLine : updatedDataLines) {
                bw.write(updatedLine);
                bw.newLine();
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
    private void populateScheduleTable() {
        DefaultTableModel scheduleTableModel = (DefaultTableModel) scheduleTable.getModel();
        scheduleTableModel.setRowCount(0); // Clear existing rows

        String presentationRequestFile = "presentation_list.txt";
        String studentDetailFile = "assign_student_list.txt";

        String currentSupervisor = idSuper; // Get the current supervisor

         try (BufferedReader brStudent = new BufferedReader(new FileReader(studentDetailFile))) {
            String lineStudent;
            while ((lineStudent = brStudent.readLine()) != null) {
                String[] studentData = lineStudent.split(",");
                if (studentData.length >= 5 && studentData[6].equals(currentSupervisor)) {
                    String id = studentData[0];
                    String intake = studentData[2];
                    String assessment = studentData[3];

                    try (BufferedReader brRequest = new BufferedReader(new FileReader(presentationRequestFile))) {
                        String lineRequest;
                        while ((lineRequest = brRequest.readLine()) != null) {
                            String[] requestData = lineRequest.split(",");
                            if (requestData.length >= 7 && requestData[0].equals(id)
                                    && requestData[2].equals(intake) && requestData[3].equals(assessment)
                                    && requestData[6].equals("APPROVED")) {
                                Object[] rowData = {id, studentData[1], intake, assessment, requestData[4], requestData[5]};
                                scheduleTableModel.addRow(rowData);
                                break; // Found the related row, move to the next student
                            }
                        }
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }    
//
//    private void populateTable() {
//        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
//        model.setRowCount(0); // Clear existing rows
//        String role = login.getRole();
//        int i = 0;
//
//        if (role.equals("Supervisor")){
//            i = 7;
//        }else{
//            i = 10;
//        }
//
//
//
//        File file = new File("status_report.txt");
//        try {
//            if (!file.exists()) {
//                file.createNewFile();
//            }
//            BufferedReader reader = new BufferedReader(new FileReader(file));
//            String line;
//            while ((line = reader.readLine()) != null) {
//                String[] data = line.split(",");
//                if (data.length >= 8) { // Ensure there are enough columns
//                    if (data[i].equals(id)) { // Check if the ID matches the filter
//                        String[] selectedData = new String[] {
//                            data[0], // Student ID
//                            data[1], // Student Name
//                            data[2], // Intake Code
//                            data[3], // Assessment
//                            data[4], // Date
//                            data[5],
//                            data[6], // Status
//                            data[7],
//                            data[8],
//                            data[9],
//                            data[10],
//                            data[11],
//                            data[12],
//                            data[13],
//                            data[14],
//                        };
//                        model.addRow(selectedData);
//                    }
//                }
//            }
//            reader.close();
//        } catch (IOException e) {
//            e.printStackTrace();
//            JOptionPane.showMessageDialog(null, "Error reading data from file: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }



     
  
     

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAccept;
    private javax.swing.JButton btnReject;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblBox;
    private javax.swing.JLabel lblPresentationTitle;
    private javax.swing.JLabel lblPrint;
    private javax.swing.JLabel lblStudPresentationReq;
    private javax.swing.JLabel lblStudPresentationSch;
    private javax.swing.JLayeredPane pnlMainPresentation;
    private javax.swing.JPanel pnlPresentation;
    private javax.swing.JTable requestTable;
    private javax.swing.JTable scheduleTable;
    // End of variables declaration//GEN-END:variables
}
